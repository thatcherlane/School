|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
CS 321
Thatcher Lane
Threads - 1/31/2017
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

1. Rev/Disc
2. Threads:Usage
    -terminology
    -C++11 threads

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
::terminology::

-Spawn = Launch a new Threads
  - generally a run function is specified
-Main thread which is started when process is started = master
  - other threads are workers or slaves
-Rule: when a worker thread is spawned it must (eventually) either be joined or detached
  - join = wait for worker to finish
  - detach = declare  that this thread will not be joined
-Race Condition = when scheduling decisions affect the correctness of a program
-Data Race = when 2 threads access the same data, not both reads (so : 2 writes or read & write)
-An Atomic Operation will not be observed or interfered with when it is partially complete

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
::C++11 threads::

included in <thread> 
-std::thread - encapsulates a worker thread

higher level: \
  std::async   | - not used here
  std::future /

-std::thread is movable but not copyable

view thread1.cpp in git repo
